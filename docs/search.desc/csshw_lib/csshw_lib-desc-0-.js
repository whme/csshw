searchState.loadedDescShard("csshw_lib", 0, "Cluster SSH tool for Windows inspired by csshX\nCLSID identifying <code>conhost.exe</code> in the registry.\nCLSID identifying the default configuration in the …\nRegistry path where <code>DelegationConsole</code> and …\n<code>DelegationConsole</code> registry key.\n<code>DelegationTerminal</code> registry key.\nGuard storing previous/old <code>DelegationConsole</code> and …\nCLI interface\nClient implementation\nDaemon imlementation\nRestore the original default terminal application setting …\nCallback function used in <code>enumerate_windows</code> to pass a Rust …\nEnumerate all top-level windows on the screen and call the …\nReturns the argument unchanged.\nReturn the Window Handle HWND for the foreground window …\nRetrieve the RegKey under which the default terminal …\nTry to retrieve the registry value for the given …\nInitialize the logger.\nCalls <code>U::from(self)</code>.\nRead the existing default terminal application setting …\nOld <code>DelegationConsole</code> registry value\nOld <code>DelegationTerminal</code> registry value\nSerialization/Deserialization implemention for windows …\nLaunch the given console application with the given …\nUtilities shared by daemon and client.\nWrite <code>DelegationConsole</code> and <code>DelegationTerminal</code> registry …\nCluster SSH tool for Windows inspired by csshX\nSubcommand that will launch a single client window\nThe <code>command</code> CLI subcommand\nSubcommand that will launch the daemon window.\nOptional subcommand Usually not specified by the user\nEnable extensive logging\nThe main entrypoint\nReturns the argument unchanged.\nReturns the argument unchanged.\nHosts and/or cluster tag(s) to connect to\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nOptional username used to connect to the hosts\nHost to connect to\nHost(s) to connect to\nUsername used to connect to the host\nUsername used to connect to the hosts\nThe pipe was closed.\nSomething went wrong.\nPossible results when reading from the named pipe and …\nWe wrote all complete INPUT_RECORD_0 sequences we read from\nTrying to read from the pipe would require us to wait for …\nReturns the argument unchanged.\nUse <code>username</code> or load the adequate one from SSH config.\nCalls <code>U::from(self)</code>.\nLaunch the SSH process.\nThe entrypoint for the <code>client</code> subcommand.\nRead all available INPUT_RECORD_0 from the named pipe and …\nThe main run loop of the client.\nWrite the given INPUT_RECORD_0 to the console input buffer.\nList of KEY_EVENT_RECORDs we have read from the named pipe.\nIncomplete INPUT_RECORD_0 sequence.\nAll required keys for the control mode key combination …\nRepresentation of a client window, holding a copy of the …\nEnum of all possible control mode states.\nThe daemon is responsible to launch a client for each …\nHacky wrapper around a window handle.\nControle mode is inactive.\nOne of the keys required for the control mode key …\nThe capacity of the broadcast channel used to send the …\nRe-sizes and re-positions the given client window based on …\nRe-sizes and re-positions the daemon console window on the …\nList of available cluster tags\nThe <code>DaemonConfig</code> that controls how the daemon console …\nReturns whether control mode is active or not given the …\nThe current control mode state.\nIf debug mode is enabled on the daemon it will also be …\nMove all given windows to the foreground.\nCalculates the position and dimensions for a client window …\nSpawns a background thread that ensures the z-order of all …\nReturns whether to <code>HWNDWrapper</code> instances are equal or not …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nTransform the position and dimensions of a console window …\nReturns a window handle to the current console window.\nReturns a window handle to the foreground window.\nHandle the given input record.\nHostname the client is connect to (or supposed to connect …\nA list of hostnames to connect to.\nWindow handle to the clients console window.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLaunches all client windows and blocks on the main run …\nLaunchs a <code>client</code> console process with its own window with …\nLaunches a client console for each given host and waits for\nLaunch a named pipe server in a dedicated thread.\nLaunch a named pipe server for each host in a dedicated …\nThe entrypoint for the <code>daemon</code> subcommand.\nWait for the named pipe server to connect, then forward …\nClears the console screen and prints the default daemon …\nPrints the default daemon instructions to the daemon …\nIterates over all still open client windows and …\nResolve cluster tags into hostnames\nThe main run loop of the <code>daemon</code> subcommand.\nThe processed console input mode controls whether special …\nA username to use to connect to all clients.\nPixel values are normalized. A scale factor needs to be …\nPixel values represent the actual physical pixel of the …\nPossible scalings for any pixel related values\nThe available workspace area on the primary monitor\nConverts physical to logical scaling.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a handle to the primary monitor.\nReturns the scaling factor of the primary monitor.\nReturns the available workspace area on the primary …\nThe height in pixels of the workspace area.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the workspace area in logical scaling.\nThe scale factor of the primary monitor.\nThe scaling of the pixels. Logical or Physical\nThe width in pixels of the workspace area.\nThe <code>x</code> coordinate of the workspace area in pixels. From the …\nThe thickness of the frame around the perimeter of a …\nThe thickness of the sizing border around the perimter of …\nThe <code>y</code> coordinate of the workspace area in pixels. From the …\nThe thickness of the frame around the perimeter of a …\nThe thickness of the sizing border around the perimter of …\nLenght of a serialized INPUT_RECORD_0\nDeserialize a struct from a u8 slice.\nConstructs and returns a struct from the the given u8 …\nSerialize a struct into a ByteBuf.\nReturns a serialized self as ByteBuf.\nu16 representation of a KEY_EVENT.\nChanges size and position of the current console window.\nEmpties the console screen output buffer of the current …\nClient and Daemon configuration structs.\nShared constants.\nImplements string representations for INPUT_RECORD related …\nReturns a HANDLE to the STD_INPUT_HANDLE of the current …\nReturns a HANDLE to the STD_OUTPUT_HANDLE of the current …\nReturns the title of the current console window.\nReturns a HANDLE to the requested STD_HANDLE of the …\nReturns the title of the window represented by the given …\nDetects if the current windows installation is Windows 10 …\nContinously prints the window rectangle of the current …\nReturns a single INPUT_RECORD read from the current …\nReturns a single INPUT_RECORD_0 where <code>EventType</code> == …\nSets the border color of the current console window.\nSets the back- and foreground color of the current console …\nSets the window title of the current console window.\nRepresentation of the <code>client</code> subcommand configurations.\nRepresentation of the <code>client</code> subcommand configurations …\nRepresentation of a cluster tag.\nRepresentation of the project configuration.\nRepresentation of the project configuration where …\nPlaceholder for the <code>&lt;username&gt;@&lt;host&gt;</code> argument to the …\nRepresentation of the <code>daemon</code> subcommand configurations.\nRepresentation of the <code>daemon</code> subcommand configurations …\nList of arguments provided to the program.\nControls how the client console windows make use of the …\nConfiguration relevant for the <code>client</code> subcommand.\nList of cluster tags.\nControls back- and foreground colors of the daemon console …\nConfiguration relevant for the <code>daemon</code> subcommand.\nReturns a sensible default <code>ClientConfig</code>.\nReturns a sensible default <code>DaemonConfig</code>.\nUnwraps the existing configuration values or applies the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nWraps all configuration values as options.\nReturns the argument unchanged.\nReturns the argument unchanged.\nUnwraps the existing configuration values or applies the …\nReturns the argument unchanged.\nWraps all configuration values as options.\nUnwraps the existing configuration values or applies the …\nReturns the argument unchanged.\nWraps all configuration values as options.\nReturns the argument unchanged.\nHeight in pixel of the daemon console window.\nList of hostnames the cluster tag is an alias for.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nName of the cluster tag, used to identify it.\nName of the program used to establish the SSH connection.\nFull path to the SSH config.\nPlaceholder string used to inject <code>&lt;user&gt;@&lt;host&gt;</code> into the …\nMaximum expected length of window title of a client window.\nName of the Pipe used for interprocess comunication …\nName of the package.\nString represation trait.\nReturns a string representation of the struct.")